from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from handlers.add_function import addEvent, comparisonText
from handlers.creat_buttons import creatButtonMenu
from database.all_database import messageLanguage, get_user_info_from_database, get_user_data_from_database, add_user_to_database, sqlAllQuestion


# --------------------------------------–ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤-------------------------------------------------------------#
class FSMquestion(StatesGroup):
    question = State()


async def searchQuestion(message: types.Message):
    await FSMquestion.question.set()
    await message.answer(messageLanguage("write_question", message),
                         reply_markup=creatButtonMenu(message, other_buttons=["/Cancel"], row_width=3))
    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞...", message=message)


async def writeVariantQuestion(message: types.Message, state: FSMContext):
    await message.answer_chat_action(types.ChatActions.TYPING)
    tmp = sqlAllQuestion("question, username")
    questions = [i[0] for i in tmp]
    questions = comparisonText(message.text, questions)
    if not tmp:
        await message.answer(messageLanguage("empty_question", message),
                             reply_markup=creatButtonMenu(message, "buttons_start_menu_private"))
        addEvent(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—à–µ–ª –≤–æ–ø—Ä–æ—Å–∞: '{message.text}'", message=message)
    else:
        usernames = [i[1] for i in tmp]
        for i in zip(questions, usernames):
            await message.answer(f"<code>{i[0]}</code>\n\n@ t.me/{i[1]}", disable_web_page_preview=True)
        await message.answer(messageLanguage("if_not_found_need_question", message),
                             reply_markup=creatButtonMenu(message, "buttons_start_menu_private"))
    await state.finish()


# --------------------------------------–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è--------------------------------#
# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class FSMProfile(StatesGroup):
    first_name = State()
    second_name = State()
    username = ""
    age = State()
    id_telegram = 0
    description = State()
    level = 0
    language = State()


# –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
async def profile(message: types.Message):
    if get_user_info_from_database(message):
        await get_user_data_from_database(message)
        addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é", message=message)
    else:
        await FSMProfile.first_name.set()

        tmp = messageLanguage("start_registration", message)
        for i in tmp[:-1]:
            await message.answer(i)
        await message.answer(tmp[-1], reply_markup=creatButtonMenu(message, other_buttons=["/Cancel"], row_width=3))
        addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...", message=message, color_consol="yellow")


# –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def downloudFirstName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["first_name"] = message.text
    await FSMProfile.next()
    await message.bot.send_message(message.from_user.id, messageLanguage("write_second_name", message))
    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ—ë –∏–º—è", message=message, color_consol="yellow")


# –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def downloudSecondName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["second_name"] = message.text
        data["username"] = message.chat.username
    await FSMProfile.next()
    await message.answer(messageLanguage("write_age", message))
    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é", message=message, color_consol="yellow")


# –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def downloudAge(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["age"] = int(message.text)
        data["id_telegram"] = message.chat.id
    await FSMProfile.next()
    for tmp in messageLanguage("write_description", message):
        await message.bot.send_message(message.from_user.id, tmp)
    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç", message=message, color_consol="yellow")


# –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def downloudDescription(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["description"] = message.text
        data["level"] = 0
    await FSMProfile.next()
    await message.answer(messageLanguage("select_language", message),
                         reply_markup=creatButtonMenu(message, row_width=3,
                                                      other_buttons=("ruüá∑üá∫", "enüá∫üá∏", "früá´üá∑", "hyüá¶üá≤", "deüá©üá™",
                                                                     "/Cancel")))
    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ", message=message, color_consol="yellow")


# –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
async def downloudLanguage(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["language"] = message.text[0:2]
        await message.answer(messageLanguage("finish_registration", message),
                             reply_markup=creatButtonMenu(message, "buttons_start_menu_private",
                                                          language=message.text[0:2]))

    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç!!", message=message, color_consol="green")
    await add_user_to_database(state)
    await state.finish()


# –û—Ç–º–µ–Ω—è–µ—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
async def close(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    addEvent("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –º–µ–º–∞", message=message, color_consol="yellow")
    await message.answer("–ù—É –æ–∫–µ–π", reply_markup=creatButtonMenu(message, "buttons_start_menu_private"))
    await state.finish()


async def linkGroup(message: types.Message):
    if get_user_info_from_database(message):
        await message.answer(messageLanguage("link_group", message))
        addEvent("–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–æ–∫", message=message)
    else:
        await message.answer(messageLanguage("error_not_login", message))
        addEvent("–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω", message=message)


# ---------------------------------------


def register_handlers_other(dp: Dispatcher):
    # –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∏ –∑–∞–≥—Ä—É–∑–æ–∫
    dp.register_message_handler(close, commands="Cancel", state='*')

    dp.register_message_handler(searchQuestion, lambda message: message.text == messageLanguage(
        "buttons_start_menu_private", message)[0])

    dp.register_message_handler(writeVariantQuestion, content_types="text", state=FSMquestion.question)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.register_message_handler(profile, lambda message: message.text == messageLanguage(
        "buttons_start_menu_private", message)[1])
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ò–º—è
    dp.register_message_handler(downloudFirstName, content_types="text", state=FSMProfile.first_name)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –§–∞–º–∏–ª–∏—è
    dp.register_message_handler(downloudSecondName, content_types="text", state=FSMProfile.second_name)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –í–æ–∑—Ä–∞—Å—Ç
    dp.register_message_handler(downloudAge, lambda message: message.text.isdigit(), state=FSMProfile.age)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –û–ø–∏—Å–∞–Ω–∏–µ
    dp.register_message_handler(downloudDescription, content_types="text", state=FSMProfile.description)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –Ø–∑—ã–∫
    dp.register_message_handler(downloudLanguage,
                                lambda message: message.text in ("ruüá∑üá∫", "enüá∫üá∏", "früá´üá∑", "hyüá¶üá≤", "deüá©üá™"),
                                state=FSMProfile.language)

    dp.register_message_handler(linkGroup, lambda message: message.text == messageLanguage(
        "buttons_start_menu_private", message)[2])
